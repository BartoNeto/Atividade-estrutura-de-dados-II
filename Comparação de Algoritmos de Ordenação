#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

double medirTempo(void (*funcao)(int[], int), int arr[], int n) {
    clock_t inicio = clock();
    funcao(arr, n);
    clock_t fim = clock();
    return ((double)(fim - inicio)) / CLOCKS_PER_SEC * 1000; // Tempo em milissegundos
}

// ========================== Selection Sort ==========================
int comparacoesSelection = 0;

void selectionSort(int arr[], int n) {
    comparacoesSelection = 0;
    for (int i = 0; i < n - 1; i++) {
        int minIdx = i;
        for (int j = i + 1; j < n; j++) {
            comparacoesSelection++;
            if (arr[j] < arr[minIdx]) {
                minIdx = j;
            }
        }
        int temp = arr[minIdx];
        arr[minIdx] = arr[i];
        arr[i] = temp;
    }
}

// ========================== Quick Sort ==========================
int comparacoesQuick = 0;

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        comparacoesQuick++;
        if (arr[j] <= pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void quickSortWrapper(int arr[], int n) {
    comparacoesQuick = 0;
    quickSort(arr, 0, n - 1);
}

// ========================== Merge Sort ==========================
int comparacoesMerge = 0;

void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2];
    
    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];
    
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        comparacoesMerge++;
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

void mergeSortWrapper(int arr[], int n) {
    comparacoesMerge = 0;
    mergeSort(arr, 0, n - 1);
}

// ========================== Shell Sort ==========================
int comparacoesShell = 0;

void shellSort(int arr[], int n) {
    comparacoesShell = 0;
    for (int gap = n / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j = i;
            while (j >= gap && arr[j - gap] > temp) {
                comparacoesShell++;
                arr[j] = arr[j - gap];
                j -= gap;
            }
            arr[j] = temp;
        }
    }
}

// ========================== Bucket Sort ==========================
int comparacoesBucket = 0;

void bucketSort(int arr[], int n) {
    comparacoesBucket = 0;
    if (n <= 0) return;
    
    // Encontrar o valor máximo
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }

    // Criar baldes
    int numBuckets = 10;
    int bucket[numBuckets][n];
    int bucketCount[numBuckets];
    for (int i = 0; i < numBuckets; i++) bucketCount[i] = 0;

    // Colocar elementos nos baldes
    for (int i = 0; i < n; i++) {
        int index = (arr[i] * numBuckets) / (max + 1);
        bucket[bucketCount[index]][index] = arr[i];
        bucketCount[index]++;
    }

    // Ordenar baldes e recolocar elementos na lista original
    int k = 0;
    for (int i = 0; i < numBuckets; i++) {
        for (int j = 0; j < bucketCount[i]; j++) {
            arr[k] = bucket[i][j];
            k++;
        }
    }
}

// ========================== Radix Sort ==========================
int comparacoesRadix = 0;

void countingSort(int arr[], int n, int exp) {
    int output[n];
    int count[10] = {0};
    
    for (int i = 0; i < n; i++) {
        comparacoesRadix++;
        count[(arr[i] / exp) % 10]++;
    }
    
    for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
    }

    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    for (int i = 0; i < n; i++) {
        arr[i] = output[i];
    }
}

void radixSort(int arr[], int n) {
    comparacoesRadix = 0;
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }

    for (int exp = 1; max / exp > 0; exp *= 10) {
        countingSort(arr, n, exp);
    }
}

// Função principal
int main() {
    int n = 10000; // Tamanho da lista
    int *arr = (int*)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 100000; // Lista de números aleatórios
    }

    printf("Tamanho da Lista: %d\n", n);
    printf("Algoritmo               | Tempo de Execução (ms) | Comparações\n");
    printf("------------------------------------------------------------\n");

    // Teste para Selection Sort
    int *arrCopy = (int*)malloc(n * sizeof(int));
    memcpy(arrCopy, arr, n * sizeof(int));
    double tempo = medirTempo(selectionSort, arrCopy, n);
    printf("Selection Sort          | %.5f ms              | %d\n", tempo, comparacoesSelection);

    // Teste para Quick Sort
    memcpy(arrCopy, arr, n * sizeof(int));
    tempo = medirTempo(quickSortWrapper, arrCopy, n);
    printf("Quick Sort             | %.5f ms              | %d\n", tempo, comparacoesQuick);

    // Teste para Merge Sort
    memcpy(arrCopy, arr, n * sizeof(int));
    tempo = medirTempo(mergeSortWrapper, arrCopy, n);
    printf("Merge Sort             | %.5f ms              | %d\n", tempo, comparacoesMerge);

    // Teste para Shell Sort
    memcpy(arrCopy, arr, n * sizeof(int));
    tempo = medirTempo(shellSort, arrCopy, n);
    printf("Shell Sort             | %.5f ms              | %d\n", tempo, comparacoesShell);

    // Teste para Bucket Sort
    memcpy(arrCopy, arr, n * sizeof(int));
    tempo = medirTempo(bucketSort, arrCopy, n);
    printf("Bucket Sort            | %.5f ms              | %d\n", tempo, comparacoesBucket);

    // Teste para Radix Sort
    memcpy(arrCopy, arr, n * sizeof(int));
    tempo = medirTempo(radixSort,
