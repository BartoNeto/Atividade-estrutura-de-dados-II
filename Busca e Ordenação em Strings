Merge Sort para ordenar palavras em ordem alfabética
#include <stdio.h>
#include <string.h>

void merge(char arr[][50], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Arrays temporários
    char leftArr[n1][50],
rightArr[n2][50];

    for (int i = 0; i < n1; i++)
        strcpy(leftArr[i], arr[left + i]);
    for (int i = 0; i < n2; i++)
        strcpy(rightArr[i], arr[mid + 1 + i]);

  
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (strcmp(leftArr[i], rightArr[j]) <= 0) {
            strcpy(arr[k], leftArr[i]);
            i++;
        } else {
            strcpy(arr[k], rightArr[j]);
            j++;
        }
        k++;
    }

  
    while (i < n1) {
        strcpy(arr[k], leftArr[i]);
        i++;
        k++;
    }
    while (j < n2) {
        strcpy(arr[k], rightArr[j]);
        j++;
        k++;
    }
}

void mergeSort(char arr[][50], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);          
mergeSort(arr, mid + 1, right);     

        merge(arr, left, mid, right);       
    }
}

int main() {
    char arr[5][50] = {"banana", "apple", "kiwi", "grape", "orange"};
    int n = 5;

    mergeSort(arr, 0, n - 1);

    printf("Lista ordenada:\n");
    for (int i = 0; i < n; i++) {
        printf("%s\n", arr[i]);
    }

    return 0;
}
Quick Sort para ordenar palavras em ordem alfabética#include <stdio.h>

#include <string.h>

int partition(char arr[][50], int low, int high) {
    char pivot[50];
    strcpy(pivot, arr[high]);

    int i = (low - 1);
    for (int j = low; j <= high - 1; j++) {
        if (strcmp(arr[j], pivot) < 0) {
            i++;
            
            char temp[50];
            strcpy(temp, arr[i]);
            strcpy(arr[i], arr[j]);
            strcpy(arr[j], temp);
        }
    }
    
    char temp[50];
    strcpy(temp, arr[i + 1]);
    strcpy(arr[i + 1], arr[high]);
    strcpy(arr[high], temp);
    return (i + 1);
}

void quickSort(char arr[][50], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);   // Ordena a parte esquerda
        quickSort(arr, pi + 1, high);  // Ordena a parte direita
    }
}

int main() {
    char arr[5][50] = {"banana", "apple", "kiwi", "grape", "orange"};
    int n = 5;

    quickSort(arr, 0, n - 1);

    printf("Lista ordenada:\n");
    for (int i = 0; i < n; i++) {
        printf("%s\n", arr[i]);
    }

    return 0;
}
Binary Search para verificar se uma palavra está presente
#include <stdio.h>
#include <string.h>

int binarySearch(char arr[][50], int n, char target[]) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        int cmp = strcmp(arr[mid], target);

        
        if (cmp == 0)
            return mid;

        
        if (cmp < 0)
            low = mid + 1;

        
        else
            high = mid - 1;
    }

    return -1; 
}

int main() {
    char arr[5][50] = {"apple", "banana", "grape", "kiwi", "orange"};
    int n = 5;
    char target[] = "kiwi";

    int result = binarySearch(arr, n, target);

    if (result != -1)
        printf("A palavra '%s' foi encontrada na posição %d.\n", target, result);
    else
        printf("A palavra '%s' não foi encontrada.\n", target);

    return 0;
}
